# 5. 制御構文

## 制御構文

Elixir でも手続き型言語と同様、条件分岐(`if`, `cond`, `case`)や例外処理(`try`~`rescue`)のような制御構文がある。

ただし、実際にはパターンマッチという強力な仕組みと`case`を組み合わせることで分岐や例外処理を表現することが多い。

## case

Elixir では`case`、そして`if`、`cond`はパターンマッチを用いる関数として実装されている。

よって、「条件によって制御を変える」のではなく「引数の値やパターンによって処理を変える」と解釈するのがいい。

パターンマッチを行うことから、`case`の各マッチにおいて変数に値を束縛することができる。

```elixir
some_list = [0, 1, 2, 3]

case some_list do
  [] -> "empty!"
  [head | _tail] -> "the first value: #{head}"
end
```

```elixir
some_map = %{
  a: 0
}

case some_map do
  %{a: value} -> {:ok, "a is #{value}"}
  %{b: value} -> {:ok, "b is #{value}"}
  _ -> {:error, "No expected key"}
end
```

以下のように`case`の結果を変数に束縛することもできる

```elixir
result = 
  case some_map do
    %{a: value} -> {:ok, "a is #{value}"}
    %{b: value} -> {:ok, "b is #{value}"}
    _ -> {:error, "No expected key"}
  end

IO.inspect(result)
```

### 練習問題 Exercise 5-1

HTTP レスポンスを表す map があり、整数の`status`と map の`body`を含むとする。

`case` 構文を使って、HTTP レスポンスを表す map のパターンに応じて処理を以下のように分けてみよう。

* `status`が 200 のとき、`:ok`と`body`の組の tuple を作る
* `status`が 400 のとき、`:error`と`:bad_request`の組の tuple を作る
* `status`が 404 のとき、`:error`と`:not_found`の組の tuple を作る
* `status`が 500 のとき、`:error`と`:internal_error`の組の tuple を作る

<!-- livebook:{"continue_on_error":true} -->

```elixir
response = %{status: 400, body: %{message: "Invalid parameter!"}}

result =
  case response do
    # implement me!
  end
```

<!-- livebook:{"continue_on_error":true} -->

```elixir
# 正しいかテストしてみよう

defmodule Exercise5 do
  def response(response) do
    case response do
      # 上の回答を入れよう
      _? -> "?"
    end
  end
end

ExUnit.start(autorun: false)

defmodule Exercise5Test do
  use ExUnit.Case, async: true

  describe "resonse/1" do
    test "returns body when status is 200" do
      response = %{status: 200, body: %{message: "Valid parameter!"}}
      assert Exercise5.response(response) == {:ok, response.body}
    end

    test "returns bad request error when status is 400" do
      response = %{status: 400, body: %{message: "Invalid parameter!"}}
      assert Exercise5.response(response) == {:error, :bad_request}
    end

    test "returns not_found error when status is 404" do
      response = %{status: 404, body: %{message: "Resource not found!"}}
      assert Exercise5.response(response) == {:error, :not_found}
    end

    test "returns internal error when status is 500" do
      response = %{status: 500, body: %{message: "Internal error!"}}
      assert Exercise5.response(response) == {:error, :internal_error}
    end
  end
end

ExUnit.run()
```

マッチの際に`when`による[guard 構文](https://hexdocs.pm/elixir/patterns-and-guards.html#guards)を用いることで、さらに細かいパターンマッチを行うことができる。

ただし、guard に用いる条件はコンパイル時に決まっている必要があり、マクロのみが使用可能。
(つまり任意の式や関数を用いることができるわけではない)

```elixir
some_list = [0, 1, 2, 3]

case some_list do
  [] -> "empty!"
  [head | _] when is_number(head) -> "#{head} is a number"
  [head | _] when is_atom(head) -> "#{head} is an atom"
  [head | _] -> "#{head} is unexpected type"
end
```

case 式は入れ子にすることもできる。

```elixir
some_map = %{
  a: %{
    answer: 42
  }
}

case some_map do
  %{b: inner} ->
    inner

  %{a: inner} ->
    case inner do
      %{hello: world} -> world
      %{answer: answer} -> answer
    end
end
```

## if と cond

Elixir では基本的に、`if`は結果が boolean となる式と共に用いる。

`cond`は`if`の条件が複数ある場合に用いる構文である。

```elixir
score = 80
if score >= 60 do
  "Pass"
else
  "Fail"
end
```

```elixir
score = 80
cond do
  score >= 90 -> "Excellent"
  score >= 75 -> "Good"
  score >= 60 -> "Pass"
  true -> "Fail"
end
```

### 練習問題 Exercise 5-2

`if`を使って、正の数の場合は "The number is positive.", それ以外(0, 負の数)の場合は "The number is zero or negative." を表示させてみよう。

```elixir
number = -5

result =
  if xxxx do
    # implement me!
  end

IO.inspect(result)
```

### 練習問題 Exercise 5-3

HTTP レスポンスを表す map があり、整数の`status`と map の`body`を含むとする。

`cond` 構文を使って、HTTP レスポンスを表す map のパターンに応じて処理を以下のように分けてみよう。

* `status`が 200 のとき、`:ok`と`body`の組の tuple を作る
* `status`が 400 のとき、`:error`と`:bad_request`の組の tuple を作る
* `status`が 404 のとき、`:error`と`:not_found`の組の tuple を作る
* `status`が 500 のとき、`:error`と`:internal_error`の組の tuple を作る

```elixir
response = %{status: 400, body: %{message: "Invalid parameter!"}}

result =
  cond do
    # implement me!
  end

IO.inspect(result)
```
